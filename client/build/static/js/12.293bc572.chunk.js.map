{"version":3,"sources":["components/forms/Checkout/Checkout.jsx"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","marginBottom","display","flexDirection","alignItems","border","palette","primary","text","padding","borderRadius","boxShadow","avatar","margin","backgroundColor","form","width","schema","yup","shape","name","required","email","town","address","withForm","changeHandlerFactory","formState","runValidations","runControlValidation","formIsInvalid","classes","history","useHistory","useContext","StoreContext","state","dispatch","handleOnChangeName","handleOnChangeTown","handleOnChangeAddress","handleOnChangeEmail","handleSubmit","useCallback","e","preventDefault","then","formData","productService","checkoutOrder","cart","resetCartSuccess","push","component","maxWidth","className","variant","onSubmit","container","item","xs","label","changeHandler","disabled","title"],"mappings":"+GAAA,uIAkBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,aAAcJ,EAAMG,QAAQ,IAC5BE,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,OAAO,aAAD,OAAeR,EAAMS,QAAQC,QAAQC,MAC3CC,QAAS,OACTC,aAAc,OACdC,UAAU,eAAD,OAAiBd,EAAMS,QAAQC,QAAQC,OAElDI,OAAQ,CACNC,OAAQhB,EAAMG,QAAQ,GACtBc,gBAAiBjB,EAAMS,QAAQC,QAAQC,MAEzCO,KAAM,CACJC,MAAO,OACPjB,UAAWF,EAAMG,QAAQ,QAwFvBiB,EAASC,MAAaC,MAAM,CAChCC,KAAMF,MAAaG,SAAS,oBAC5BC,MAAOJ,MAEJI,MAAM,uBACND,SAAS,qBACZE,KAAML,MAAaG,SAAS,oBAC5BG,QAASN,MAAaG,SAAS,yBAmBlBI,uBA9GE,SAAC,GAMX,IALLC,EAKI,EALJA,qBACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,cAEMC,EAAUpC,IACVqC,EAAUC,cAFZ,EAGwBC,qBAAWC,KAA/BC,EAHJ,EAGIA,MAAOC,EAHX,EAGWA,SACTC,EAAqBZ,EAAqB,QAC1Ca,EAAqBb,EAAqB,QAC1Cc,EAAwBd,EAAqB,WAC7Ce,EAAsBf,EAAqB,SAE3CgB,EAAeC,uBACnB,SAACC,GACCA,EAAEC,iBACFjB,IAAiBkB,MAAK,SAACC,GACrBC,IAAeC,cAAcb,EAAMc,KAAMH,GAAUD,MAAK,WACtDT,EAASc,eACTnB,EAAQoB,KAAK,qBAInB,CAACpB,EAASK,EAAUT,EAAgBQ,EAAMc,OAG5C,OACE,kBAAC,IAAD,CAAWG,UAAU,OAAOC,SAAS,MACnC,kBAAC,IAAD,MACA,yBAAKC,UAAWxB,EAAQjC,OACtB,kBAAC,IAAD,CAAYuD,UAAU,KAAKG,QAAQ,MAAnC,0FAGA,0BAAMD,UAAWxB,EAAQhB,KAAM0C,SAAUf,GACvC,kBAAC,IAAD,CAAMgB,WAAS,EAAC1D,QAAS,GACvB,kBAAC,IAAD,CAAM2D,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CACEC,MAAO,qBACPzC,KAAM,OACN0C,cAAexB,EACfT,qBAAsBA,EACtBF,UAAWA,KAGf,kBAAC,IAAD,CAAMgC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CACEC,MAAO,uCACPzC,KAAM,QACN0C,cAAerB,EACfZ,qBAAsBA,EACtBF,UAAWA,KAGf,kBAAC,IAAD,CAAMgC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CACEC,MAAO,2BACPzC,KAAM,OACN0C,cAAevB,EACfV,qBAAsBA,EACtBF,UAAWA,KAGf,kBAAC,IAAD,CAAMgC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CACEC,MAAO,iCACPzC,KAAM,UACN0C,cAAetB,EACfX,qBAAsBA,EACtBF,UAAWA,MAIjB,kBAAC,IAAD,CACEoC,SAAUjC,IACVkC,MAAO,oDAkBE,CACnB5C,KAAM,GACNE,MAAO,GACPC,KAAM,GACNC,QAAS,IAYqCP","file":"static/js/12.293bc572.chunk.js","sourcesContent":["import React, { useContext, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport * as yup from 'yup';\r\nimport {\r\n  CssBaseline,\r\n  Grid,\r\n  Typography,\r\n  Container,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport withForm from '../../../hocs/withForm';\r\nimport { StoreContext } from '../../../store/store';\r\nimport { resetCartSuccess } from '../../../store/actions';\r\nimport InputField from '../InputField';\r\nimport SubmitButton from '../../buttons/SubmitButton/SubmitButton';\r\nimport productService from '../../../services/product-service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(14),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    border: `solid 1px ${theme.palette.primary.text}`,\r\n    padding: '20px',\r\n    borderRadius: '20px',\r\n    boxShadow: `3px 3px 5px ${theme.palette.primary.text}`,\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.text,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst Checkout = ({\r\n  changeHandlerFactory,\r\n  formState,\r\n  runValidations,\r\n  runControlValidation,\r\n  formIsInvalid,\r\n}) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { state, dispatch } = useContext(StoreContext);\r\n  const handleOnChangeName = changeHandlerFactory('name');\r\n  const handleOnChangeTown = changeHandlerFactory('town');\r\n  const handleOnChangeAddress = changeHandlerFactory('address');\r\n  const handleOnChangeEmail = changeHandlerFactory('email');\r\n\r\n  const handleSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      runValidations().then((formData) => {\r\n        productService.checkoutOrder(state.cart, formData).then(() => {\r\n          dispatch(resetCartSuccess())\r\n          history.push('/thankyou');\r\n        })\r\n      });\r\n    },\r\n    [history, dispatch, runValidations, state.cart]\r\n  );\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Данни за поръчка\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <InputField\r\n                label={'Име'}\r\n                name={'name'}\r\n                changeHandler={handleOnChangeName}\r\n                runControlValidation={runControlValidation}\r\n                formState={formState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <InputField\r\n                label={'Email адрес'}\r\n                name={'email'}\r\n                changeHandler={handleOnChangeEmail}\r\n                runControlValidation={runControlValidation}\r\n                formState={formState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <InputField\r\n                label={'Град'}\r\n                name={'town'}\r\n                changeHandler={handleOnChangeTown}\r\n                runControlValidation={runControlValidation}\r\n                formState={formState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <InputField\r\n                label={'Адрес'}\r\n                name={'address'}\r\n                changeHandler={handleOnChangeAddress}\r\n                runControlValidation={runControlValidation}\r\n                formState={formState}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <SubmitButton\r\n            disabled={formIsInvalid()}\r\n            title={'Поръчай'}\r\n          />\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Name is required'),\r\n  email: yup\r\n    .string()\r\n    .email('Must be valid email')\r\n    .required('Email is required'),\r\n  town: yup.string().required('Town is required'),\r\n  address: yup.string().required('Address is required'),\r\n});\r\n\r\nconst initialState = {\r\n  name: '',\r\n  email: '',\r\n  town: '',\r\n  address: '',\r\n};\r\n\r\nCheckout.propTypes = {\r\n  changeHandlerFactory: PropTypes.func,\r\n  formState: PropTypes.object,\r\n  runValidations: PropTypes.func,\r\n  runControlValidation: PropTypes.func,\r\n  formIsInvalid: PropTypes.func,\r\n  history: PropTypes.object,\r\n};\r\n\r\nexport default withForm(Checkout, initialState, schema);\r\n"],"sourceRoot":""}